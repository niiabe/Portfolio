@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (isAuthenticated)
{
    @ChildContent
}
else if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 80vh;">
        <div class="text-center">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Checking authentication...</p>
        </div>
    </div>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    private bool isAuthenticated = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthentication();
    }

    private async Task CheckAuthentication()
    {
        try
        {
            var authResult = await SessionStorage.GetAsync<bool>("isAuthenticated");
            var loginTimeResult = await SessionStorage.GetAsync<DateTime>("loginTime");
            
            if (authResult.Success && authResult.Value)
            {
                // Check if session has expired (24 hours)
                if (loginTimeResult.Success)
                {
                    var sessionAge = DateTime.UtcNow - loginTimeResult.Value;
                    if (sessionAge.TotalHours > 24)
                    {
                        // Session expired, clear and redirect
                        await ClearSession();
                        return;
                    }
                }
                
                isAuthenticated = true;
            }
            else
            {
                // Not authenticated, redirect to login
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception)
        {
            // Error reading session, redirect to login
            Navigation.NavigateTo("/login");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ClearSession()
    {
        try
        {
            await SessionStorage.DeleteAsync("isAuthenticated");
            await SessionStorage.DeleteAsync("loginTime");
        }
        catch (Exception)
        {
            // Ignore errors when clearing session
        }
        
        Navigation.NavigateTo("/login");
    }
}