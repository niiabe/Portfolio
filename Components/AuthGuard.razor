@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (isAuthorized)
{
    @ChildContent
}
else if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 80vh;">
        <div class="text-center">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Checking authentication...</p>
        </div>
    </div>
}


@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private bool isAuthorized;
    private bool isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            isAuthorized = true;
        }
        else
        {
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        isLoading = false;
    }
}